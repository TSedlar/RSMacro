import rs.macro.api.Macro;
import rs.macro.api.Manifest;
import rs.macro.api.access.Inventory;
import rs.macro.api.access.RuneScape;
import rs.macro.api.util.Random;
import rs.macro.api.util.Renderable;
import rs.macro.api.util.fx.MousePaint;
import rs.macro.api.util.fx.PixelOperator;
import rs.macro.api.util.fx.Text;
import rs.macro.api.util.fx.listener.PixelListener;
import rs.macro.api.util.fx.model.PixelModel;

import java.awt.*;

/**
 * @author Tyler Sedlar
 * @since 10/21/15
 */
@Manifest(name = "Test", author = "Tyler", description = "For debugging purposes",
        version = "1.0.0", banks = false)
public class Test extends Macro implements Renderable, PixelListener {

    private static final PixelModel AIR_RUNE = PixelModel.fromString("#B1A5A5/2 #B4A9A8/2/1/0 #B7ACAB/2/2/0 #B8ADAD/2/3/0 #BBB1B1/2/4/0 #BCB2B2/2/5/0 #BDB4B4/2/6/0 #C0B7B7/2/7/0 #C3BABA/2/8/0 #AA9F9E/2/-2/1 #ADA2A2/2/-1/1 #B0A3A3/2/0/1 #B2A6A6/2/1/1 #B5AAAA/2/2/1 #B7ACAB/2/3/1 #B8ADAD/2/4/1 #BAAFAE/2/5/1 #BBB1B1/2/6/1 #BDB4B4/2/7/1 #C0B7B7/2/8/1 #C3BABA/2/9/1 #C6BDBD/2/10/1 #A09595/2/-4/2 #A69A99/2/-3/2 #A99E9D/2/-2/2 #ACA0A0/2/-1/2 #ADA2A2/2/0/2 #B1A5A5/2/1/2 #B2A6A6/2/2/2 #B4A9A8/2/3/2 #B5AAAA/2/4/2 #B5AAAA/2/5/2 #B8ADAD/2/6/2 #BBB1B1/2/7/2 #BDB4B4/2/8/2 #C0B7B7/2/9/2 #C3BABA/2/10/2 #C6BDBD/2/11/2 #C6BFBF/2/12/2 #968B8B/2/-6/3 #9B9190/2/-5/3 #A09595/2/-4/3 #A69A99/2/-3/3 #A79C9B/2/-2/3 #AA9F9E/2/-1/3 #ACA0A0/2/0/3 #ADA2A2/2/1/3 #B0A3A3/2/2/3 #B0A3A3/2/3/3 #B1A5A5/2/4/3 #B2A6A6/2/5/3 #B5AAAA/2/6/3 #B8ADAD/2/7/3 #BBB1B1/2/8/3 #BDB4B4/2/9/3 #C0B7B7/2/10/3 #C3BABA/2/11/3 #C6BDBD/2/12/3 #908686/2/-7/4 #968B8B/2/-6/4 #9B9190/2/-5/4 #A09595/2/-4/4 #A49998/2/-3/4 #A69A99/2/-2/4 #A99E9D/2/-1/4 #A99E9D/2/0/4 #AA9F9E/2/1/4 #AA9F9E/2/2/4 #ACA0A0/2/3/4 #ADA2A2/2/4/4 #ADA2A2/2/5/4 #B0A3A3/2/6/4 #B4A9A8/2/7/4 #B8ADAD/2/8/4 #BBB1B1/2/9/4 #BDB4B4/2/10/4 #C0B7B7/2/11/4 #C3BABA/2/12/4 #C6BDBD/2/13/4 #908686/2/-7/5 #968B8B/2/-6/5 #9B9190/2/-5/5 #9E9393/2/-4/5 #A29797/2/-3/5 #A49998/2/-2/5 #A49998/2/-1/5 #A69A99/2/0/5 #A79C9B/2/1/5 #A79C9B/2/2/5 #A99E9D/2/3/5 #E5E1E1/2/4/5 #E5E1E1/2/5/5 #ACA0A0/2/6/5 #ACA0A0/2/7/5 #B2A6A6/2/8/5 #B7ACAB/2/9/5 #BBB1B1/2/10/5 #BDB4B4/2/11/5 #C0B7B7/2/12/5 #C3BABA/2/13/5 #7E7676/2/-9/6 #897F7E/2/-8/6 #908686/2/-7/6 #968B8B/2/-6/6 #9B9190/2/-5/6 #9D9292/2/-4/6 #9E9393/2/-3/6 #9E9393/2/-2/6 #A09595/2/-1/6 #A29797/2/0/6 #A29797/2/1/6 #A49998/2/2/6 #E5E1E1/2/3/6 #E5E1E1/2/4/6 #E5E1E1/2/5/6 #E5E1E1/2/6/6 #A99E9D/2/7/6 #AA9F9E/2/8/6 #B0A3A3/2/9/6 #B5AAAA/2/10/6 #BAAFAE/2/11/6 #BDB4B4/2/12/6 #C0B7B7/2/13/6 #C3BABA/2/14/6 #7E7676/2/-9/7 #877E7D/2/-8/7 #8E8484/2/-7/7 #988D8C/2/-6/7 #988D8C/2/-5/7 #998F8E/2/-4/7 #998F8E/2/-3/7 #9B9190/2/-2/7 #9D9292/2/-1/7 #E5E1E1/2/0/7 #E5E1E1/2/1/7 #A09595/2/2/7 #E5E1E1/2/3/7 #E5E1E1/2/4/7 #E5E1E1/2/5/7 #E5E1E1/2/6/7 #E5E1E1/2/7/7 #A79C9B/2/8/7 #A79C9B/2/9/7 #ADA2A2/2/10/7 #B2A6A6/2/11/7 #B8ADAD/2/12/7 #BFB5B5/2/13/7 #C0B7B7/2/14/7 #726A6A/2/-10/8 #7D7474/2/-9/8 #877E7D/2/-8/8 #8E8484/2/-7/8 #928888/2/-6/8 #948A8A/2/-5/8 #948A8A/2/-4/8 #968B8B/2/-3/8 #988D8C/2/-2/8 #988D8C/2/-1/8 #E5E1E1/2/0/8 #E5E1E1/2/1/8 #9B9190/2/2/8 #9D9292/2/3/8 #E5E1E1/2/4/8 #E5E1E1/2/5/8 #E5E1E1/2/6/8 #E5E1E1/2/7/8 #E5E1E1/2/8/8 #A49998/2/9/8 #A69A99/2/10/8 #AA9F9E/2/11/8 #B1A5A5/2/12/8 #B7ACAB/2/13/8 #BCB2B2/2/14/8 #C0B7B7/2/15/8 #6F6868/2/-10/9 #7B7372/2/-9/9 #857C7C/2/-8/9 #8C8382/2/-7/9 #8E8484/2/-6/9 #8E8484/2/-5/9 #E5E1E1/2/-4/9 #E5E1E1/2/-3/9 #928888/2/-2/9 #948A8A/2/-1/9 #968B8B/2/0/9 #E5E1E1/2/1/9 #E5E1E1/2/2/9 #998F8E/2/3/9 #998F8E/2/4/9 #E5E1E1/2/5/9 #E5E1E1/2/6/9 #E5E1E1/2/7/9 #E5E1E1/2/8/9 #E5E1E1/2/9/9 #A09595/2/10/9 #A29797/2/11/9 #A99E9D/2/12/9 #B0A3A3/2/13/9 #B5AAAA/2/14/9 #BBB1B1/2/15/9 #C2B9B8/2/16/9 #6D6666/2/-10/10 #79706F/2/-9/10 #827A7A/2/-8/10 #897F7E/2/-7/10 #897F7E/2/-6/10 #8B8180/2/-5/10 #E5E1E1/2/-4/10 #E5E1E1/2/-3/10 #E5E1E1/2/-2/10 #908686/2/-1/10 #908686/2/0/10 #E5E1E1/2/1/10 #E5E1E1/2/2/10 #E5E1E1/2/3/10 #968B8B/2/4/10 #988D8C/2/5/10 #E5E1E1/2/6/10 #E5E1E1/2/7/10 #E5E1E1/2/8/10 #E5E1E1/2/9/10 #9D9292/2/10/10 #9E9393/2/11/10 #9E9393/2/12/10 #A99E9D/2/13/10 #B1A5A5/2/14/10 #B8ADAD/2/15/10 #BFB5B5/2/16/10 #6B6363/2/-10/11 #776E6D/2/-9/11 #807878/2/-8/11 #827A7A/2/-7/11 #857C7C/2/-6/11 #877E7D/2/-5/11 #877E7D/2/-4/11 #E5E1E1/2/-3/11 #E5E1E1/2/-2/11 #E5E1E1/2/-1/11 #8C8382/2/0/11 #8E8484/2/1/11 #E5E1E1/2/2/11 #E5E1E1/2/3/11 #928888/2/4/11 #948A8A/2/5/11 #968B8B/2/6/11 #E5E1E1/2/7/11 #E5E1E1/2/8/11 #E5E1E1/2/9/11 #9B9190/2/10/11 #9D9292/2/11/11 #9E9393/2/12/11 #A69A99/2/13/11 #ADA2A2/2/14/11 #B5AAAA/2/15/11 #BCB2B2/2/16/11 #67605F/2/-10/12 #756C6C/2/-9/12 #7E7676/2/-8/12 #807878/2/-7/12 #827A7A/2/-6/12 #E5E1E1/2/-5/12 #857C7C/2/-4/12 #877E7D/2/-3/12 #E5E1E1/2/-2/12 #E5E1E1/2/-1/12 #E5E1E1/2/0/12 #8C8382/2/1/12 #E5E1E1/2/2/12 #E5E1E1/2/3/12 #908686/2/4/12 #928888/2/5/12 #928888/2/6/12 #E5E1E1/2/7/12 #E5E1E1/2/8/12 #E5E1E1/2/9/12 #998F8E/2/10/12 #9B9190/2/11/12 #9E9393/2/12/12 #A49998/2/13/12 #AA9F9E/2/14/12 #B2A6A6/2/15/12 #BAAFAE/2/16/12 #625B5B/2/-10/13 #726A6A/2/-9/13 #7D7474/2/-8/13 #7E7676/2/-7/13 #7E7676/2/-6/13 #E5E1E1/2/-5/13 #E5E1E1/2/-4/13 #E5E1E1/2/-3/13 #857C7C/2/-2/13 #E5E1E1/2/-1/13 #E5E1E1/2/0/13 #897F7E/2/1/13 #E5E1E1/2/2/13 #E5E1E1/2/3/13 #8E8484/2/4/13 #908686/2/5/13 #908686/2/6/13 #E5E1E1/2/7/13 #E5E1E1/2/8/13 #E5E1E1/2/9/13 #988D8C/2/10/13 #998F8E/2/11/13 #9E9393/2/12/13 #A69A99/2/13/13 #A79C9B/2/14/13 #B0A3A3/2/15/13 #B7ACAB/2/16/13 #5A5454/2/-10/14 #6D6666/2/-9/14 #79706F/2/-8/14 #7B7372/2/-7/14 #7D7474/2/-6/14 #E5E1E1/2/-5/14 #E5E1E1/2/-4/14 #E5E1E1/2/-3/14 #827A7A/2/-2/14 #E5E1E1/2/-1/14 #E5E1E1/2/0/14 #877E7D/2/1/14 #E5E1E1/2/2/14 #E5E1E1/2/3/14 #8C8382/2/4/14 #8C8382/2/5/14 #8E8484/2/6/14 #E5E1E1/2/7/14 #E5E1E1/2/8/14 #E5E1E1/2/9/14 #968B8B/2/10/14 #988D8C/2/11/14 #9E9393/2/12/14 #A69A99/2/13/14 #A99E9D/2/14/14 #ACA0A0/2/15/14 #B4A9A8/2/16/14 #554F4F/2/-10/15 #696161/2/-9/15 #776E6D/2/-8/15 #79706F/2/-7/15 #7B7372/2/-6/15 #E5E1E1/2/-5/15 #E5E1E1/2/-4/15 #E5E1E1/2/-3/15 #807878/2/-2/15 #807878/2/-1/15 #E5E1E1/2/0/15 #857C7C/2/1/15 #E5E1E1/2/2/15 #E5E1E1/2/3/15 #8B8180/2/4/15 #8B8180/2/5/15 #8C8382/2/6/15 #8E8484/2/7/15 #E5E1E1/2/8/15 #E5E1E1/2/9/15 #948A8A/2/10/15 #968B8B/2/11/15 #9D9292/2/12/15 #A79C9B/2/13/15 #A99E9D/2/14/15 #ACA0A0/2/15/15 #B1A5A5/2/16/15 #655E5C/2/-9/16 #756C6C/2/-8/16 #776E6D/2/-7/16 #776E6D/2/-6/16 #79706F/2/-5/16 #7B7372/2/-4/16 #7D7474/2/-3/16 #7E7676/2/-2/16 #E5E1E1/2/-1/16 #E5E1E1/2/0/16 #E5E1E1/2/1/16 #857C7C/2/2/16 #E5E1E1/2/3/16 #E5E1E1/2/4/16 #897F7E/2/5/16 #8B8180/2/6/16 #E5E1E1/2/7/16 #E5E1E1/2/8/16 #E5E1E1/2/9/16 #928888/2/10/16 #968B8B/2/11/16 #9D9292/2/12/16 #A99E9D/2/13/16 #AA9F9E/2/14/16 #ACA0A0/2/15/16 #B0A3A3/2/16/16 #5C5656/2/-9/17 #726A6A/2/-8/17 #726A6A/2/-7/17 #756C6C/2/-6/17 #776E6D/2/-5/17 #79706F/2/-4/17 #7B7372/2/-3/17 #E5E1E1/2/-2/17 #E5E1E1/2/-1/17 #7E7676/2/0/17 #807878/2/1/17 #E5E1E1/2/2/17 #E5E1E1/2/3/17 #857C7C/2/4/17 #877E7D/2/5/17 #E5E1E1/2/6/17 #E5E1E1/2/7/17 #E5E1E1/2/8/17 #E5E1E1/2/9/17 #E5E1E1/2/10/17 #948A8A/2/11/17 #9D9292/2/12/17 #A49998/2/13/17 #A79C9B/2/14/17 #A99E9D/2/15/17 #655E5C/2/-8/18 #6F6868/2/-7/18 #726A6A/2/-6/18 #756C6C/2/-5/18 #776E6D/2/-4/18 #E5E1E1/2/-3/18 #E5E1E1/2/-2/18 #7B7372/2/-1/18 #7D7474/2/0/18 #E5E1E1/2/1/18 #E5E1E1/2/2/18 #807878/2/3/18 #827A7A/2/4/18 #857C7C/2/5/18 #E5E1E1/2/6/18 #E5E1E1/2/7/18 #E5E1E1/2/8/18 #E5E1E1/2/9/18 #908686/2/10/18 #928888/2/11/18 #9D9292/2/12/18 #A09595/2/13/18 #A29797/2/14/18 #A69A99/2/15/18 #554F4F/2/-8/19 #6B6363/2/-7/19 #6F6868/2/-6/19 #726A6A/2/-5/19 #756C6C/2/-4/19 #756C6C/2/-3/19 #776E6D/2/-2/19 #79706F/2/-1/19 #E5E1E1/2/0/19 #E5E1E1/2/1/19 #E5E1E1/2/2/19 #7E7676/2/3/19 #807878/2/4/19 #E5E1E1/2/5/19 #E5E1E1/2/6/19 #E5E1E1/2/7/19 #E5E1E1/2/8/19 #8B8180/2/9/19 #8E8484/2/10/19 #928888/2/11/19 #998F8E/2/12/19 #9D9292/2/13/19 #9E9393/2/14/19 #5C5656/2/-7/20 #6D6666/2/-6/20 #6F6868/2/-5/20 #726A6A/2/-4/20 #726A6A/2/-3/20 #756C6C/2/-2/20 #776E6D/2/-1/20 #E5E1E1/2/0/20 #E5E1E1/2/1/20 #7B7372/2/2/20 #7D7474/2/3/20 #7E7676/2/4/20 #E5E1E1/2/5/20 #E5E1E1/2/6/20 #E5E1E1/2/7/20 #877E7D/2/8/20 #8B8180/2/9/20 #8C8382/2/10/20 #908686/2/11/20 #968B8B/2/12/20 #988D8C/2/13/20 #9B9190/2/14/20 #655E5C/2/-6/21 #6D6666/2/-5/21 #6D6666/2/-4/21 #6F6868/2/-3/21 #726A6A/2/-2/21 #756C6C/2/-1/21 #776E6D/2/0/21 #79706F/2/1/21 #79706F/2/2/21 #7B7372/2/3/21 #E5E1E1/2/4/21 #E5E1E1/2/5/21 #E5E1E1/2/6/21 #827A7A/2/7/21 #857C7C/2/8/21 #897F7E/2/9/21 #8C8382/2/10/21 #908686/2/11/21 #928888/2/12/21 #948A8A/2/13/21 #5A5454/2/-6/22 #696161/2/-5/22 #6B6363/2/-4/22 #6D6666/2/-3/22 #6F6868/2/-2/22 #726A6A/2/-1/22 #756C6C/2/0/22 #776E6D/2/1/22 #776E6D/2/2/22 #79706F/2/3/22 #7B7372/2/4/22 #7D7474/2/5/22 #7E7676/2/6/22 #807878/2/7/22 #857C7C/2/8/22 #877E7D/2/9/22 #897F7E/2/10/22 #8B8180/2/11/22 #8C8382/2/12/22 #908686/2/13/22 #5C5656/2/-4/23 #67605F/2/-3/23 #6D6666/2/-2/23 #6F6868/2/-1/23 #726A6A/2/0/23 #726A6A/2/1/23 #756C6C/2/2/23 #776E6D/2/3/23 #79706F/2/4/23 #7B7372/2/5/23 #7D7474/2/6/23 #7D7474/2/7/23 #7E7676/2/8/23 #807878/2/9/23 #827A7A/2/10/23 #857C7C/2/11/23 #5C5656/2/-2/24 #67605F/2/-1/24 #6D6666/2/0/24 #6D6666/2/1/24 #6D6666/2/2/24 #6D6666/2/3/24 #6D6666/2/4/24 #726A6A/2/5/24 #756C6C/2/6/24 #776E6D/2/7/24 #79706F/2/8/24 #7B7372/2/9/24 #7D7474/2/10/24 #585151/2/-1/25 #5C5656/2/0/25 #5C5656/2/1/25 #5F5959/2/2/25 #625B5B/2/3/25 #67605F/2/4/25 #696161/2/5/25 #6D6666/2/6/25 #6F6868/2/7/25 #726A6A/2/8/25");

    private int[] ids = new int[28];

    private Rectangle bounds = null;

    @Override
    public void atStart() {
    }

    @Override
    public int loop() {
        for (int i = 0; i < Inventory.SLOTS.length; i++) {
            if (Inventory.hasItem(i)) {
                int id = Inventory.idAt(i);
                ids[i] = id;
            } else {
                ids[i] = -1;
            }
        }
        long start = System.nanoTime();
        bounds = Inventory.findSlot(1022);
        long end = System.nanoTime();
        double time = ((end - start) / 1e9);
        System.out.println(String.format("Found item in %.2f", time));
        System.out.println(String.format("Average time %.5f", (time / 28)));
        return Random.nextInt(50, 100);
    }

    private static final Color MOUSE_OUTER = new Color(200, 85, 70);
    private static final Color MOUSE_INNER = new Color(240, 245, 45);
    private static final Color MOUSE_WAVE = new Color(240, 245, 45);
    private static final Color MOUSE_TRAIL = new Color(200, 85, 70);

    private static final Color LABEL_BACKGROUND = new Color(40, 40, 40, 180);

    @Override
    public void render(Graphics2D g) {
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_GASP);
        MousePaint.drawMouseWaves(g, MOUSE_WAVE);
        MousePaint.drawTrail(g, MOUSE_TRAIL);
        MousePaint.drawOval(g, MOUSE_OUTER, MOUSE_INNER);
        g.setFont(g.getFont().deriveFont(11F));
        if (bounds != null) {
            g.setColor(Color.GREEN);
            g.draw(bounds);
        }
        for (int i = 0; i < ids.length; i++) {
            if (ids[i] == -1) {
                continue;
            }
            Rectangle bounds = Inventory.SLOTS[i];
            String text = Integer.toString(ids[i]);
            int textWidth = g.getFontMetrics().stringWidth(text);
            g.setColor(LABEL_BACKGROUND);
            g.fillRect(bounds.x, bounds.y + 10, bounds.width, 12);
            Text.drawRuneString(g, text, bounds.x + (bounds.width / 2) - (textWidth / 2),
                    bounds.y + 20, Color.GREEN);
        }
    }

    @Override
    public void onPixelsUpdated(PixelOperator operator) {

    }
}
